---
# Tâche pour collecter les informations des équipements Aruba via le module aoscx_facts

- name: (collect_device_info) Initialize switches data list
  ansible.builtin.set_fact:
    inventory_data: []
  run_once: true
  delegate_to: localhost
  tags:
    - collect

- name: (collect_device_info) Collect comprehensive facts from Aruba AOS-CX switches
  block:
    - name: (collect_device_info) Gather system facts using aoscx_facts module
      arubanetworks.aoscx.aoscx_facts:
        gather_subset:
          - hardware
          - host_name
          - platform_name
          - version
        gather_network_resources: []
      register: device_facts
      retries: "{{ max_tentatives }}"
      delay: 10
      until: device_facts is not failed
      tags:
        - collect

    - name: (collect_device_info) Debug collected facts
      ansible.builtin.debug:
        var: device_facts.ansible_facts
      tags:
        - collect
        - debug

    - name: (collect_device_info) Extract device information from facts
      ansible.builtin.set_fact:
        hostname_extracted: >-
          {{
            device_facts.ansible_facts.get('ansible_net_hostname', inventory_hostname)
          }}
        model_extracted: >-
          {{
            device_facts.ansible_facts.get('ansible_net_model', 'N/A')
          }}
        serial_extracted: >-
          {{
            device_facts.ansible_facts.get('ansible_net_serialnum', 'N/A')
          }}
        version_extracted: >-
          {{
            device_facts.ansible_facts.get('ansible_net_version', 'N/A')
          }}
        platform_extracted: >-
          {{
            device_facts.ansible_facts.get('ansible_net_system', 'N/A')
          }}
      tags:
        - collect

    - name: (collect_device_info) Create entry for this switch
      ansible.builtin.set_fact:
        switch_data:
          nom_switch: "{{ hostname_extracted }}"
          modele: "{{ model_extracted }}"
          serial: "{{ serial_extracted }}"
          version_os: "{{ version_extracted }}"
          platform: "{{ platform_extracted }}"
          date_collecte: "{{ '%Y-%m-%d %H:%M:%S' | strftime }}"
          adresse_ip: "{{ inventory_hostname }}"
      tags:
        - collect

    - name: (collect_device_info) Store switch data in host vars
      ansible.builtin.set_fact:
        switch_inventory_data: "{{ switch_data }}"
      tags:
        - collect

    - name: (collect_device_info) Debug extracted data
      ansible.builtin.debug:
        msg:
          - "Switch: {{ hostname_extracted }}"
          - "Model: {{ model_extracted }}"
          - "Serial: {{ serial_extracted }}"
          - "Version: {{ version_extracted }}"
          - "Platform: {{ platform_extracted }}"
      tags:
        - collect
        - debug
      
  rescue:
    - name: (collect_device_info) Log connection failure details
      ansible.builtin.debug:
        msg: 
          - "ÉCHEC de collecte pour {{ inventory_hostname }}"
          - "Erreur: {{ ansible_failed_result.msg | default('Erreur de connexion inconnue') }}"
      tags:
        - collect

    - name: (collect_device_info) Record collection failure for this switch
      ansible.builtin.set_fact:
        switch_inventory_data:
          nom_switch: "{{ inventory_hostname }}"
          modele: "ÉCHEC DE COLLECTE"
          serial: "ÉCHEC DE COLLECTE"
          version_os: "ÉCHEC DE COLLECTE"
          platform: "ÉCHEC DE COLLECTE"
          date_collecte: "{{ '%Y-%m-%d %H:%M:%S' | strftime }}"
          adresse_ip: "{{ inventory_hostname }}"
          erreur: "{{ ansible_failed_result.msg | default('Erreur de connexion') }}"
      tags:
        - collect