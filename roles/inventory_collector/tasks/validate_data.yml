---
# roles/inventory_collector/tasks/validate_data.yml
# Tâche pour valider les données collectées

- name: (validate_data) Ensure jmespath is installed
  ansible.builtin.pip:
    name: jmespath
    state: present
  delegate_to: localhost
  become: true
  run_once: true
  tags:
    - validate
    - always

- name: (validate_data) Consolidate inventory data from all hosts
  ansible.builtin.set_fact:
    consolidated_inventory_data: >-
      {{
        groups['all'] 
        | map('extract', hostvars, 'switch_inventory_data') 
        | select('defined') 
        | list
      }}
  run_once: true
  delegate_to: localhost
  tags:
    - validate

- name: (validate_data) Debug consolidated data
  ansible.builtin.debug:
    msg: 
      - "Total hosts in inventory: {{ groups['all'] | length }}"
      - "Consolidated data count: {{ consolidated_inventory_data | length }}"
      - "Sample data: {{ consolidated_inventory_data[:2] if consolidated_inventory_data else 'No data' }}"
  run_once: true
  delegate_to: localhost
  tags:
    - validate
    - debug

- name: (validate_data) Verify if data was collected
  ansible.builtin.assert:
    that:
      - consolidated_inventory_data | length > 0
    fail_msg: "Aucune donnée d'inventaire n'a été collectée. Vérifiez la connectivité aux équipements."
    success_msg: "{{ consolidated_inventory_data | length }} équipements collectés avec succès"
  run_once: true
  delegate_to: localhost
  tags:
    - validate

- name: (validate_data) Identify devices with missing data
  ansible.builtin.set_fact:
    missing_data_devices: >-
      {{
        consolidated_inventory_data 
        | selectattr('modele', 'equalto', 'ÉCHEC DE COLLECTE') 
        | list
      }}
  run_once: true
  delegate_to: localhost
  tags:
    - validate

- name: (validate_data) Log devices with missing data
  ansible.builtin.debug:
    msg: "AVERTISSEMENT : {{ missing_data_devices | length }} équipements ont des données manquantes ou incomplètes"
  when: missing_data_devices | length > 0
  run_once: true
  delegate_to: localhost
  tags:
    - validate

- name: (validate_data) Extract valid serial numbers
  ansible.builtin.set_fact:
    all_serials: >-
      {{
        consolidated_inventory_data 
        | map(attribute='serial') 
        | select('ne', 'N/A') 
        | select('ne', 'ÉCHEC DE COLLECTE') 
        | select('ne', 'Unknown')
        | select('ne', '')
        | list
      }}
  run_once: true
  delegate_to: localhost
  tags:
    - validate

- name: (validate_data) Find duplicate serial numbers using Python
  ansible.builtin.set_fact:
    duplicate_serials: >-
      {%- set serial_counts = {} -%}
      {%- for serial in all_serials -%}
        {%- if serial in serial_counts -%}
          {%- set _ = serial_counts.update({serial: serial_counts[serial] + 1}) -%}
        {%- else -%}
          {%- set _ = serial_counts.update({serial: 1}) -%}
        {%- endif -%}
      {%- endfor -%}
      {{
        serial_counts | dict2items 
        | selectattr('value', '>', 1) 
        | map(attribute='key') 
        | list
      }}
  run_once: true
  delegate_to: localhost
  tags:
    - validate

- name: (validate_data) Log duplicate serial numbers
  ansible.builtin.debug:
    msg: "ATTENTION : Numéros de série en doublon détectés : {{ duplicate_serials | join(', ') }}"
  when: duplicate_serials | length > 0
  run_once: true
  delegate_to: localhost
  tags:
    - validate

- name: (validate_data) Generate validation summary
  ansible.builtin.debug:
    msg:
      - "=== RÉSUMÉ DE LA VALIDATION ==="
      - "Total équipements traités: {{ consolidated_inventory_data | length }}"
      - "Collectes réussies: {{ (consolidated_inventory_data | length) - (missing_data_devices | length) }}"
      - "Collectes échouées: {{ missing_data_devices | length }}"
      - "Numéros de série en doublon: {{ duplicate_serials | length }}"
  run_once: true
  delegate_to: localhost
  tags:
    - validate

