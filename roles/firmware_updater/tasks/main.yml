---
# Tâches principales pour le rôle firmware_updater

- name: (main) Initialize firmware update process
  block:
    - name: (main) Validate required parameters
      ansible.builtin.assert:
        that:
          - target_firmware_version is defined
          - target_firmware_version | length > 0
          - (firmware_file_path is defined and firmware_file_path | length > 0) or auto_select_firmware | bool
        fail_msg: "Le paramètre target_firmware_version est obligatoire. firmware_file_path est requis si auto_select_firmware est désactivé"
        success_msg: "Paramètres requis validés"
      run_once: true
      delegate_to: localhost
      tags:
        - always

    - name: (main) Initialize update tracking variables
      ansible.builtin.set_fact:
        update_start_time: "{{ '%Y-%m-%d %H:%M:%S' | strftime }}"
        update_status: "{{ 'dry_run_started' if dry_run else 'started' }}"
        update_errors: []
        rollback_performed: false
      tags:
        - always

    - name: (main) Display dry-run mode warning
      ansible.builtin.debug:
        msg:
          - "⚠️  MODE DRY-RUN ACTIVÉ ⚠️"
          - "Aucune modification réelle ne sera effectuée"
          - "Les vérifications et la détection seront exécutées normalement"
          - "Switch: {{ inventory_hostname }}"
      when: dry_run | bool
      tags:
        - always

    - name: (main) Create temporary directory for update files
      ansible.builtin.tempfile:
        state: directory
        prefix: "firmware_update_"
      register: temp_update_dir
      delegate_to: localhost
      run_once: true
      tags:
        - always

    - name: (main) Set temporary paths
      ansible.builtin.set_fact:
        temp_update_path: "{{ temp_update_dir.path }}"
        temp_backup_file: "{{ temp_update_dir.path }}/config_backup_{{ inventory_hostname }}_{{ '%Y%m%d_%H%M%S' | strftime }}.cfg"
        temp_report_file: "{{ temp_update_dir.path }}/update_report_{{ inventory_hostname }}_{{ '%Y%m%d_%H%M%S' | strftime }}.md"
      delegate_to: localhost
      tags:
        - always

  rescue:
    - name: (main) Handle initialization failure
      ansible.builtin.set_fact:
        update_status: "initialization_failed"
        update_errors: "{{ update_errors + [ansible_failed_result.msg | default('Initialization failed')] }}"
      tags:
        - always

    - name: (main) Fail on initialization error
      ansible.builtin.fail:
        msg: "Échec de l'initialisation de la mise à jour firmware: {{ update_errors | join(', ') }}"
      tags:
        - always

# Étape 1: Vérification des prérequis
- name: (main) Check prerequisites
  import_tasks: check_prerequisites.yml
  tags:
    - check
    - always

# Étape 2: Collecte de l'état actuel
- name: (main) Collect current firmware state
  import_tasks: collect_current_state.yml
  tags:
    - check
    - always

# Étape 2.5: Détection du modèle de switch
- name: (main) Detect switch model
  import_tasks: detect_switch_model.yml
  tags:
    - check
    - always

# Étape 2.6: Sélection automatique du firmware
- name: (main) Select firmware based on model
  import_tasks: select_firmware.yml
  when: auto_select_firmware | bool
  tags:
    - check
    - always

# Étape 2.7: Validation du firmware sélectionné
- name: (main) Validate firmware file
  import_tasks: validate_firmware.yml
  when: not (dry_run | bool)
  tags:
    - validate
    - always

- name: (main) Simulate firmware validation (dry-run)
  debug:
    msg:
      - "🔍 [DRY-RUN] Validerait le firmware: {{ firmware_file_path | default('N/A') }}"
      - "🔍 [DRY-RUN] Vérifierait l'existence et la taille du fichier"
      - "🔍 [DRY-RUN] Contrôlerait le format du nom de fichier"
      - "🔍 [DRY-RUN] Sélection automatique: {{ auto_select_firmware | ternary('OUI', 'NON') }}"
  when: dry_run | bool
  tags:
    - validate
    - always

# Étape 3: Détermination de la stratégie
- name: (main) Determine update strategy
  import_tasks: determine_strategy.yml
  tags:
    - check
    - always

# Étape 4: Sauvegarde de la configuration (si activée)
- name: (main) Backup current configuration
  import_tasks: backup_config.yml
  when: 
    - backup_config | bool
    - not (dry_run | bool)
  tags:
    - backup
    - always

- name: (main) Simulate backup configuration (dry-run)
  debug:
    msg: "🔍 [DRY-RUN] Sauvegarderait la configuration actuelle"
  when: 
    - backup_config | bool
    - dry_run | bool
  tags:
    - backup
    - always

# Étape 5: Upload du firmware
- name: (main) Upload firmware
  import_tasks: upload_firmware.yml
  when: not (dry_run | bool)
  tags:
    - upload
    - always

- name: (main) Simulate firmware upload (dry-run)
  debug:
    msg: 
      - "🔍 [DRY-RUN] Uploaderait le firmware: {{ firmware_file_path }}"
      - "🔍 [DRY-RUN] Vers la partition: {{ chosen_partition | default('auto') }}"
      - "🔍 [DRY-RUN] Stratégie: {{ partition_strategy }}"
  when: dry_run | bool
  tags:
    - upload
    - always

# Étape 6: Redémarrage du switch
- name: (main) Reboot switch with new firmware
  import_tasks: reboot_switch.yml
  when: not (dry_run | bool)
  tags:
    - reboot
    - always

- name: (main) Simulate switch reboot (dry-run)
  debug:
    msg: 
      - "🔍 [DRY-RUN] Redémarrerait le switch avec le nouveau firmware"
      - "🔍 [DRY-RUN] Timeout estimé: {{ current_reboot_timeout | default(max_reboot_time) }}s"
  when: dry_run | bool
  tags:
    - reboot
    - always

# Étape 7: Vérification post-update
- name: (main) Verify firmware update
  import_tasks: verify_update.yml
  when: 
    - verify_post_update | bool
    - not (dry_run | bool)
  tags:
    - verify
    - always

- name: (main) Simulate post-update verification (dry-run)
  debug:
    msg: 
      - "🔍 [DRY-RUN] Vérifierait la version firmware: {{ target_firmware_version }}"
      - "🔍 [DRY-RUN] Testerait la connectivité et les fonctionnalités"
      - "🔍 [DRY-RUN] Validerait la stabilité du système"
  when: 
    - verify_post_update | bool
    - dry_run | bool
  tags:
    - verify
    - always

# Étape 8: Nettoyage (optionnel)
- name: (main) Cleanup old firmware files
  import_tasks: cleanup.yml
  when: cleanup_old_firmware | bool
  tags:
    - cleanup

# Finalisation et rapport
- name: (main) Finalize update process
  block:
    - name: (main) Set completion time
      ansible.builtin.set_fact:
        update_end_time: "{{ '%Y-%m-%d %H:%M:%S' | strftime }}"
        update_status: "{{ 'dry_run_completed' if dry_run else ('completed' if update_status != 'failed' else 'failed') }}"
      tags:
        - always

    - name: (main) Generate update report
      ansible.builtin.template:
        src: update_report.md.j2
        dest: "{{ temp_report_file }}"
      delegate_to: localhost
      when: 
        - generate_report | bool
        - not (dry_run | default(false) | bool)
      tags:
        - always

    - name: (main) Generate dry-run report
      ansible.builtin.copy:
        content: |
          # Rapport Dry-Run de Mise à Jour Firmware
          
          ## Informations Générales
          
          | Paramètre | Valeur |
          |-----------|--------|
          | **Switch** | {{ inventory_hostname }} |
          | **Mode** | DRY-RUN (Test uniquement) |
          | **Date** | {{ update_start_time }} |
          | **Statut** | {{ update_status | upper }} |
          
          ## Configuration Testée
          
          | Paramètre | Valeur |
          |-----------|--------|
          | **Version cible** | {{ target_firmware_version }} |
          | **Modèle détecté** | {{ switch_model_number | default('N/A') }} ({{ switch_series | default('N/A') }} series) |
          | **Firmware sélectionné** | {{ firmware_file_path | default('N/A') }} |
          | **Sélection automatique** | {{ auto_select_firmware | ternary('✓ Activée', '✗ Désactivée') }} |
          | **Stratégie de partition** | {{ partition_strategy | upper }} |
          | **Sauvegarde config** | {{ backup_config | ternary('✓ Activée', '✗ Désactivée') }} |
          
          ## Résultats du Test
          
          ✅ **Détection de modèle** - {{ switch_model_number | default('N/A') }} identifié
          ✅ **Sélection firmware** - {{ firmware_file_path | default('N/A') }}
          ✅ **Configuration validée** - Tous les paramètres sont corrects
          
          ## Actions Simulées
          
          🔍 Sauvegarde de la configuration
          🔍 Upload du firmware vers la partition {{ chosen_partition | default('auto') }}
          🔍 Redémarrage du switch
          🔍 Vérification de la nouvelle version
          
          ## Recommandations
          
          ✅ **Test réussi** - La configuration est prête pour l'exécution
          ➡️ **Prochaine étape** - Exécuter avec `dry_run: false` pour la mise à jour réelle
          
          ---
          
          **Rapport dry-run généré le {{ '%Y-%m-%d %H:%M:%S' | strftime }} par Ansible Firmware Updater**
        dest: "{{ temp_report_file }}"
        mode: '0644'
      delegate_to: localhost
      when: 
        - generate_report | bool
        - dry_run | default(false) | bool
      tags:
        - always

    - name: (main) Ensure firmware_updates directory exists on repository server
      ansible.builtin.file:
        path: "{{ repository_path }}/firmware_updates"
        state: directory
        mode: '0755'
      delegate_to: "{{ repository_server }}"
      when: 
        - generate_report | bool
        - repository_server | length > 0
      become: true
      tags:
        - always

    - name: (main) Transfer report to repository
      ansible.builtin.copy:
        src: "{{ temp_report_file }}"
        dest: "{{ repository_path }}/firmware_updates/{{ inventory_hostname }}_{{ '%Y%m%d_%H%M%S' | strftime }}_report.md"
        mode: '0644'
      delegate_to: "{{ repository_server }}"
      when: 
        - generate_report | bool
        - repository_server | length > 0
      become: true
      tags:
        - always

    - name: (main) Display update summary
      ansible.builtin.debug:
        msg:
          - "=== RÉSUMÉ {{ 'DRY-RUN' if dry_run else 'DE LA MISE À JOUR' }} FIRMWARE ==="
          - "Switch: {{ inventory_hostname }}"
          - "Modèle détecté: {{ switch_model_number | default('N/A') }} ({{ switch_series | default('N/A') }} series)"
          - "Statut: {{ update_status | upper }}"
          - "Version cible: {{ target_firmware_version }}"
          - "Firmware sélectionné: {{ firmware_file_path | default('N/A') }}"
          - "Partition utilisée: {{ chosen_partition | default('N/A') }}"
          - "Durée totale: {{ update_duration | default('N/A') }}"
          - "{{ 'Mode: DRY-RUN - Aucune modification effectuée' if dry_run else 'Rollback effectué: ' + (rollback_performed | ternary('OUI', 'NON')) }}"
          - "Erreurs: {{ update_errors | length }}"
      tags:
        - always

  rescue:
    - name: (main) Handle update failure
      ansible.builtin.set_fact:
        update_status: "failed"
        update_end_time: "{{ '%Y-%m-%d %H:%M:%S' | strftime }}"
      tags:
        - always

    - name: (main) Log critical failure
      ansible.builtin.debug:
        msg:
          - "ÉCHEC CRITIQUE de la mise à jour firmware"
          - "Switch: {{ inventory_hostname }}"
          - "Erreur: {{ ansible_failed_result.msg | default('Erreur inconnue') }}"
      tags:
        - always

  always:
    - name: (main) Cleanup temporary files
      ansible.builtin.file:
        path: "{{ temp_update_path }}"
        state: absent
      delegate_to: localhost
      run_once: true
      when: temp_update_path is defined
      tags:
        - always
        - cleanup