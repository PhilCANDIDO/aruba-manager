---
# tasks/check_firmware.yml - Vérification de l'existence du firmware

# === Vérification pour source locale ===
- name: "(check_firmware) Vérifier l'existence du firmware en local"
  ansible.builtin.stat:
    path: "{{ local_firmware_path }}/{{ firmware_filename }}"
  register: local_firmware_stat
  delegate_to: "{{ repository_server }}"
  become: false
  vars:
    ansible_user: "{{ repository_user | default('deploy') }}"
    ansible_password: "{{ repository_password | default(omit) }}"
    ansible_ssh_pass: "{{ repository_password | default(omit) }}"
  when: firmware_source_type == "local"
  tags:
    - check

- name: "(check_firmware) Échec si le firmware local n'existe pas"
  ansible.builtin.fail:
    msg: "{{ msg_firmware_not_found }} - Chemin: {{ local_firmware_path }}/{{ firmware_filename }}"
  when: 
    - firmware_source_type == "local"
    - not (local_firmware_stat.stat.exists | default(false))
  tags:
    - check

- name: "(check_firmware) Récupérer les informations du firmware local"
  ansible.builtin.set_fact:
    firmware_size: "{{ local_firmware_stat.stat.size | default(0) }}"
    firmware_size_mb: "{{ (local_firmware_stat.stat.size | default(0) | int / 1024 / 1024) | round(2) }}"
  when: 
    - firmware_source_type == "local"
    - local_firmware_stat.stat.exists | default(false)
  tags:
    - check

# === Vérification pour source distante (HTTP/HTTPS) ===
- name: "(check_firmware) Construire l'URL du firmware"
  ansible.builtin.set_fact:
    firmware_url: "http://{{ repository_server }}{{ repository_path }}/{{ firmware_filename }}"
  when: firmware_source_type == "remote"
  tags:
    - check

- name: "(check_firmware) Vérifier l'existence du firmware sur le serveur HTTP"
  ansible.builtin.uri:
    url: "{{ firmware_url }}"
    method: HEAD
    status_code: [200, 201]
    timeout: 30
  delegate_to: localhost
  register: firmware_check
  failed_when: false
  when: firmware_source_type == "remote"
  tags:
    - check

- name: "(check_firmware) Échec si le firmware distant n'existe pas"
  ansible.builtin.fail:
    msg: "{{ msg_firmware_not_found }} - URL: {{ firmware_url }}"
  when: 
    - firmware_source_type == "remote"
    - firmware_check.status != 200
  tags:
    - check

- name: "(check_firmware) Récupérer les informations du firmware distant"
  ansible.builtin.set_fact:
    firmware_size: "{{ firmware_check.content_length | default(0) }}"
    firmware_size_mb: "{{ (firmware_check.content_length | default(0) | int / 1024 / 1024) | round(2) }}"
  when: 
    - firmware_source_type == "remote"
    - firmware_check.status == 200
  tags:
    - check

# === Affichage des informations ===
- name: "(check_firmware) Afficher les informations du firmware (source locale)"
  ansible.builtin.debug:
    msg: 
      - "✓ Firmware trouvé ({{ firmware_source_type }})"
      - "Fichier: {{ firmware_filename }}"
      - "Taille: {{ firmware_size_mb }} MB"
      - "Emplacement: {{ repository_server }}:{{ local_firmware_path }}/{{ firmware_filename }}"
  when: firmware_source_type == "local"
  tags:
    - check

- name: "(check_firmware) Afficher les informations du firmware (source distante)"
  ansible.builtin.debug:
    msg: 
      - "✓ Firmware trouvé ({{ firmware_source_type }})"
      - "Fichier: {{ firmware_filename }}"
      - "Taille: {{ firmware_size_mb }} MB"
      - "URL: {{ firmware_url }}"
  when: firmware_source_type == "remote"
  tags:
    - check