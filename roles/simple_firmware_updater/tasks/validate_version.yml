---
# tasks/validate_version.yml - Validation de la version après redémarrage

- name: "(validate_version) Récupérer les facts après redémarrage"
  arubanetworks.aoscx.aoscx_facts:
    gather_subset:
      - platform_name
      - software_version
      - software_images
  register: post_reboot_facts
  retries: 5
  delay: 30
  until: post_reboot_facts is not failed

- name: debug post_reboot_facts
  ansible.builtin.debug:
    var: post_reboot_facts.ansible_facts

- name: "(validate_version) Extraire la version installée"
  ansible.builtin.set_fact:
    installed_version: "{{ post_reboot_facts.ansible_facts.ansible_net_version }}"
  when: post_reboot_facts.ansible_facts.ansible_net_version is defined

- name: "(validate_version) Sauvegarder la nouvelle version"
  ansible.builtin.set_fact:
    new_version: "{{ installed_version }}"

- name: "(validate_version) Vérifier la correspondance des versions"
  ansible.builtin.assert:
    that:
      - installed_version == target_version
    fail_msg: "{{ msg_validation_failed }}"
    success_msg: "{{ msg_validation_success }}"

- name: "(validate_version) Afficher le résumé final avec les informations des partitions"
  ansible.builtin.debug:
    msg: 
      - "=== VALIDATION RÉUSSIE ==="
      - "Version précédente: {{ primary_version }}"
      - "Version installée: {{ installed_version }}"
      - "Modèle: {{ post_reboot_facts.ansible_facts.ansible_net_model | default('N/A') }}"
      - "Système: {{ post_reboot_facts.ansible_facts.ansible_net_system | default('N/A') }}"
      - "========================="

- name: "(validate_version) Nettoyer le répertoire temporaire"
  ansible.builtin.file:
    path: "{{ remote_temp_dir }}"
    state: absent
  delegate_to: localhost
  when: cleanup_server_files | default(true)