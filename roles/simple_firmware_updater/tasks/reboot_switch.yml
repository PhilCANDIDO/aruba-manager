---
# tasks/reboot_switch.yml - Redémarrage du switch sur la partition primary

- name: "(reboot_switch) Afficher le début du redémarrage"
  ansible.builtin.debug:
    msg: "{{ msg_reboot_started }}"

- name: "(reboot_switch) Sauvegarder l'heure de début du redémarrage"
  ansible.builtin.set_fact:
    reboot_start_time: "{{ lookup('pipe', 'date +%s') }}"

- name: "(reboot_switch) Configurer le boot sur primary et redémarrer"
  arubanetworks.aoscx.aoscx_boot_firmware:
    partition_name: "primary"
  register: boot_result

- name: "(reboot_switch) Afficher le résultat de la commande boot"
  ansible.builtin.debug:
    var: boot_result

- name: "(reboot_switch) Message d'information sur le redémarrage"
  ansible.builtin.debug:
    msg: "Le switch devrait redémarrer automatiquement suite au changement de partition de boot"

- name: "(reboot_switch) Forcer le redémarrage via l'API REST si nécessaire"
  ansible.builtin.uri:
    url: "https://{{ ansible_host }}/rest/v10.08/system/reboot"
    method: POST
    body_format: json
    body: {}
    user: "{{ aruba_user }}"
    password: "{{ aruba_password }}"
    force_basic_auth: true
    validate_certs: false
    status_code: [200, 202]
  delegate_to: localhost
  when: boot_result.changed is defined and not boot_result.changed
  ignore_errors: true

- name: "(reboot_switch) Attendre que le switch soit inaccessible"
  ansible.builtin.wait_for:
    host: "{{ ansible_host }}"
    port: 22
    state: stopped
    delay: 10
    timeout: 120
  delegate_to: localhost

- name: "(reboot_switch) Attendre que le switch redémarre complètement"
  ansible.builtin.wait_for:
    host: "{{ ansible_host }}"
    port: 22
    state: started
    delay: 60
    timeout: "{{ reboot_timeout }}"
  delegate_to: localhost

- name: "(reboot_switch) Pause supplémentaire pour stabilisation"
  ansible.builtin.pause:
    seconds: 60
    prompt: "Attente de la stabilisation complète du switch..."

- name: "(reboot_switch) Vérifier la connectivité SSH"
  ansible.builtin.wait_for_connection:
    delay: 10
    timeout: 180

- name: "(reboot_switch) Calculer la durée du redémarrage"
  ansible.builtin.set_fact:
    reboot_duration: "{{ (lookup('pipe', 'date +%s') | int) - (reboot_start_time | int) }}"

- name: "(reboot_switch) Afficher la durée du redémarrage"
  ansible.builtin.debug:
    msg: "✓ Switch redémarré avec succès en {{ reboot_duration }} secondes"