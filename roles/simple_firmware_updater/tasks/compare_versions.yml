---
# tasks/compare_versions.yml - Comparaison des versions firmware

- name: "Récupérer les informations sur les images installées"
  arubanetworks.aoscx.aoscx_facts:
    gather_subset:
      - software_images
  register: images_facts

- name: "Débugger les facts récupérés"
  ansible.builtin.debug:
    var: images_facts.ansible_facts
  when: dry_run | bool

- name: "Extraire la version de la partition primary"
  ansible.builtin.set_fact:
    primary_version: "{{ images_facts.ansible_facts.ansible_net_software_images.primary.version | default('0.0.0') }}"
  when: images_facts.ansible_facts.ansible_net_software_images is defined

- name: "Gérer le cas où les images ne sont pas disponibles"
  ansible.builtin.set_fact:
    primary_version: "{{ images_facts.ansible_facts.ansible_net_version | default('0.0.0') }}"
  when: 
    - images_facts.ansible_facts.ansible_net_software_images is not defined
    - images_facts.ansible_facts.ansible_net_version is defined

- name: "Extraire la version du nom du firmware"
  ansible.builtin.set_fact:
    target_version: "{{ firmware_filename | regex_search('(\\d+)_(\\d+)_(\\d+)(?:_(\\d+))?', '\\1.\\2.\\3.\\4') | regex_replace('\\.+$', '') }}"

- name: "Afficher les versions"
  ansible.builtin.debug:
    msg: |
      Version actuelle (primary): {{ primary_version }}
      Version cible: {{ target_version }}

- name: "Comparer les versions"
  ansible.builtin.set_fact:
    version_comparison: "{{ target_version is version(primary_version, '>') }}"

- name: "Vérifier si la mise à jour est nécessaire"
  ansible.builtin.debug:
    msg: "{{ msg_version_not_superior }}"
  when: not version_comparison

- name: "Arrêter si la version n'est pas supérieure"
  ansible.builtin.meta: end_play
  when: not version_comparison

- name: "Confirmer que la mise à jour est nécessaire"
  ansible.builtin.debug:
    msg: "✓ Mise à jour nécessaire: {{ primary_version }} → {{ target_version }}"