---
# tasks/compare_versions.yml - Comparaison des versions firmware

- name: "(compare_versions) Récupérer les informations sur les images installées"
  arubanetworks.aoscx.aoscx_facts:
    gather_subset:
      - software_images
      - software_version
  register: images_facts
  tags:
    - check

- name: "(compare_versions) Débugger les facts récupérés"
  ansible.builtin.debug:
    var: images_facts.ansible_facts
  when: dry_run | bool
  tags:
    - check

- name: "(compare_versions) Extraire la version de la partition primary"
  ansible.builtin.set_fact:
    primary_version: "{{ images_facts.ansible_facts.ansible_net_software_images.primary_image_version | regex_replace('^[A-Z]+\\.', '') }}"
  when: images_facts.ansible_facts.ansible_net_software_images.primary_image_version is defined
  tags:
    - check

- name: "(compare_versions) Gérer le cas où les images ne sont pas disponibles"
  ansible.builtin.set_fact:
    primary_version: "{{ images_facts.ansible_facts.ansible_net_software_version | regex_replace('^[A-Z]+\\.', '') | default('0.0.0') }}"
  when: 
    - primary_version is not defined
    - images_facts.ansible_facts.ansible_net_software_version is defined
  tags:
    - check

- name: "(compare_versions) Fallback si aucune version trouvée"
  ansible.builtin.set_fact:
    primary_version: "0.0.0"
  when: primary_version is not defined
  tags:
    - check

- name: "(compare_versions) Extraire la version du nom du firmware"
  ansible.builtin.set_fact:
    target_version: "{{ firmware_filename | regex_search('\\d{4}_(\\d+_\\d+_\\d+(?:_\\d+)?)(?:\\.swi)?$', '\\1') | first | regex_replace('_', '.') }}"
  tags:
    - check

- name: "(compare_versions) Afficher les versions"
  ansible.builtin.debug:
    msg: 
      - "Version actuelle (primary): {{ primary_version }}"
      - "Version cible: {{ target_version }}"
  tags:
    - check

- name: "(compare_versions) Comparer les versions"
  ansible.builtin.set_fact:
    version_comparison: "{{ target_version is version(primary_version, '>') }}"
  tags:
    - check

- name: "(compare_versions) Vérifier si la mise à jour est nécessaire"
  ansible.builtin.debug:
    msg: "{{ msg_version_not_superior }}"
  when: not version_comparison
  tags:
    - check

- name: "(compare_versions) Arrêter si la version n'est pas supérieure"
  ansible.builtin.meta: end_play
  when: not version_comparison
  tags:
    - check

- name: "(compare_versions) Confirmer que la mise à jour est nécessaire"
  ansible.builtin.debug:
    msg: "✓ Mise à jour nécessaire: {{ primary_version }} → {{ target_version }}"
  tags:
    - check