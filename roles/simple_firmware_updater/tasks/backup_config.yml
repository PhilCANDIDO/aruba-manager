---
# tasks/backup_config.yml - Sauvegarde simplifiée de la configuration

- name: "(backup_config) Définir les variables nécessaires"
  ansible.builtin.set_fact:
    backup_filename: "{{ backup_filename | default('config_backup_' + inventory_hostname + '_' + (hostvars['localhost']['global_timestamp'] | default('manual')) + '.cfg') }}"
    remote_temp_dir: "{{ remote_temp_dir | default('/tmp/ansible_simple_firmware') }}"
    repository_server: "{{ repository_server | default(hostvars[inventory_hostname]['repository_server'] | default('s-ansible-1')) }}"
  tags:
    - backup

- name: "(backup_config) Créer le répertoire temporaire local"
  ansible.builtin.file:
    path: "{{ remote_temp_dir }}"
    state: directory
    mode: '0755'
  delegate_to: localhost
  tags:
    - backup

- name: "(backup_config) Afficher le répertoire de travail actuel"
  ansible.builtin.debug:
    msg: "Répertoire de travail: {{ lookup('env', 'PWD') }}"
  delegate_to: localhost
  tags:
    - backup

- name: "(backup_config) Sauvegarder la configuration avec aoscx_backup_config"
  arubanetworks.aoscx.aoscx_backup_config:
    config_name: "running-config"
    output_file: "{{ backup_filename }}"
  register: backup_result
  tags:
    - backup

- name: "(backup_config) Afficher le résultat de la sauvegarde"
  ansible.builtin.debug:
    var: backup_result
  tags:
    - backup

- name: "(backup_config) Vérifier que la sauvegarde a réussi"
  ansible.builtin.debug:
    msg: "✓ Configuration sauvegardée avec succès"
  when: backup_result is succeeded
  tags:
    - backup

- name: "(backup_config) Vérifier la sauvegarde locale"
  ansible.builtin.stat:
    path: "{{ backup_filename }}"
  register: backup_stat
  delegate_to: localhost
  tags:
    - backup

- name: "(backup_config) Afficher la taille du fichier de sauvegarde"
  ansible.builtin.debug:
    msg: "Fichier de sauvegarde créé: {{ backup_stat.stat.size | default(0) }} bytes"
  when: backup_stat.stat.exists | default(false)
  tags:
    - backup

- name: "(backup_config) Créer le répertoire de sauvegarde sur le serveur repository"
  ansible.builtin.file:
    path: "{{ backup_path }}/{{ inventory_hostname }}"
    state: directory
    mode: '0755'
  delegate_to: "{{ repository_server }}"
  become: true
  become_user: root
  vars:
    ansible_user: "{{ repository_user | default('deploy') }}"
    ansible_password: "{{ repository_password | default(omit) }}"
    ansible_become_password: "{{ repository_become_password | default(omit) }}"
  when: 
    - repository_server | length > 0
    - not (dry_run | default(false) | bool)
  tags:
    - backup

- name: "(backup_config) Transférer la sauvegarde vers le serveur repository"
  ansible.builtin.copy:
    src: "{{ backup_filename }}"
    dest: "{{ backup_path }}/{{ inventory_hostname }}/{{ backup_filename }}"
    mode: '0644'
  delegate_to: "{{ repository_server }}"
  become: true
  become_user: root
  vars:
    ansible_user: "{{ repository_user | default('deploy') }}"
    ansible_password: "{{ repository_password | default(omit) }}"
    ansible_become_password: "{{ repository_become_password | default(omit) }}"
  when: 
    - repository_server | length > 0
    - (not (dry_run | default(false) | bool) or (force_backup_in_dryrun | default(false) | bool))
    - backup_stat.stat.exists | default(false)
  tags:
    - backup

- name: "(backup_config) [DRY-RUN] Simuler le transfert de la sauvegarde"
  ansible.builtin.debug:
    msg: "{{ msg_dryrun_skip }} - Transfert de {{ backup_filename }} vers {{ repository_server }}:{{ backup_path }}/{{ inventory_hostname }}/"
  when:
    - repository_server | length > 0
    - dry_run | default(false) | bool
    - not (force_backup_in_dryrun | default(false) | bool)
  tags:
    - backup

- name: "(backup_config) Créer le fichier de métadonnées"
  ansible.builtin.copy:
    content: |
      {
        "backup_date": "{{ hostvars['localhost']['global_timestamp'] | default('manual') }}",
        "switch_hostname": "{{ inventory_hostname }}",
        "switch_ip": "{{ ansible_host }}",
        "firmware_version": "{{ primary_version | default('unknown') }}",
        "backup_size": {{ backup_stat.stat.size | default(0) }}
      }
    dest: "{{ backup_filename }}.metadata.json"
    mode: '0644'
  delegate_to: localhost
  when: backup_stat.stat.exists | default(false)
  tags:
    - backup

- name: "(backup_config) Transférer les métadonnées vers le serveur repository"
  ansible.builtin.copy:
    src: "{{ backup_filename }}.metadata.json"
    dest: "{{ backup_path }}/{{ inventory_hostname }}/{{ backup_filename }}.metadata.json"
    mode: '0644'
  delegate_to: "{{ repository_server }}"
  become: true
  become_user: root
  vars:
    ansible_user: "{{ repository_user | default('deploy') }}"
    ansible_password: "{{ repository_password | default(omit) }}"
    ansible_become_password: "{{ repository_become_password | default(omit) }}"
  when: 
    - repository_server | length > 0
    - (not (dry_run | default(false) | bool) or (force_backup_in_dryrun | default(false) | bool))
    - backup_stat.stat.exists | default(false)
  tags:
    - backup

- name: "(backup_config) Afficher le résumé de la sauvegarde"
  ansible.builtin.debug:
    msg: |
      {{ msg_backup_success }}
      Taille: {{ backup_stat.stat.size | default(0) }} bytes
      Emplacement: {{ repository_server }}:{{ backup_path }}/{{ inventory_hostname }}/{{ backup_filename }}
  tags:
    - backup